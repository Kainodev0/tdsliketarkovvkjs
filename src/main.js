// src/main.js
import { setupInput } from './engine/input.js';
import { update } from './engine/update.js';
import { draw } from './render/draw.js';
import { debug, initDebugger, toggleDebug } from './engine/debugger.js';
import { player } from './engine/player.js';
import { map } from './engine/map.js';
import { generateStartingGear, addItemToInventory } from './systems/inventory/index.js';
import { loadAssets, debugAssets } from './systems/assetLoader.js';
import { monitorPerformance, drawPerformanceInfo, measureTime } from './systems/performanceUtils.js';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
window.player = player;
window.map = map;
window.gameState = { 
  showInventory: false,
  scene: 'loading',
  showFPS: true,
  debug: false
};

// –§—É–Ω–∫—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ (–±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ requestAnimationFrame)
function gameLoop(timestamp) {
  try {
    // –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const metrics = monitorPerformance(timestamp);
    
    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è measureTime –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    
    // –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    measureTime(() => update(player), 'update');
    
    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å—Ü–µ–Ω—É
    measureTime(() => draw(ctx, player), 'draw');
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º FPS –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (window.gameState.showFPS) {
      drawPerformanceInfo(ctx, metrics, true);
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
    requestAnimationFrame(gameLoop);
  } catch (err) {
    debug(`üí• –û—à–∏–±–∫–∞ –≤ gameLoop: ${err.message}`, 'error');
    console.error(err); // –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    requestAnimationFrame(gameLoop); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
export async function startGame() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥—á–∏–∫
    initDebugger();
    debug('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    
    // –ü–æ–ª—É—á–∞–µ–º canvas
    const canvas = document.getElementById('gameCanvas');
    if (!canvas) throw new Error('Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–≤–æ–¥
    setupInput(canvas);
    debug('üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Å—Å–µ—Ç—ã
    debug('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Å—Å–µ—Ç—ã...');
    await loadAssets();
    debug('‚úÖ –ê—Å—Å–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingScreen = document.getElementById('loadingScreen');
    if (loadingScreen) loadingScreen.style.display = 'none';
    
    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—Å—Å–µ—Ç—ã
    debugAssets();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    const startingItems = generateStartingGear();
    for (const item of startingItems) {
      const result = addItemToInventory(player.inventory, item);
      if (result) debug(`üéí –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${item.name}`);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ü–µ–Ω—É
    window.gameState.scene = 'map';
    debug('üó∫Ô∏è –°—Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: map');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è FPS
    const fpsToggleButton = document.createElement('button');
    fpsToggleButton.className = 'ui-button';
    fpsToggleButton.style.top = '90px';
    fpsToggleButton.style.right = '10px';
    fpsToggleButton.innerText = 'FPS';
    fpsToggleButton.addEventListener('click', () => {
      window.gameState.showFPS = !window.gameState.showFPS;
    });
    document.getElementById('gameUI').appendChild(fpsToggleButton);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    debug('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª...');
    requestAnimationFrame(gameLoop);
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É, –Ω–æ –µ—ë –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ UI
    toggleDebug(false);
    
  } catch (error) {
    debug(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    console.error(error); // –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const debuggerDiv = document.getElementById('debugger');
    if (debuggerDiv) {
      debuggerDiv.classList.remove('collapsed');
      debuggerDiv.innerHTML += `\n<span style="color: red;">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}</span>`;
    }
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
document.addEventListener('DOMContentLoaded', () => {
  const debugButton = document.getElementById('debugButton');
  if (debugButton) {
    debugButton.addEventListener('click', () => {
      const dbg = document.getElementById('debugger');
      dbg.classList.toggle('collapsed');
      // –¢–∞–∫–∂–µ –≤–∫–ª—é—á–∞–µ–º/–æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      window.gameState.debug = !dbg.classList.contains('collapsed');
      toggleDebug(window.gameState.debug);
    });
  }
});