// src/main.js
// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

import { setupInput } from './engine/input.js';
import { update } from './engine/update.js';
import { draw } from './render/draw.js';
import { debug, initDebugger, toggleDebug } from './engine/debugger.js';
import { player, initPlayer } from './engine/player.js';
import { map } from './engine/map.js';
import { loadAssets } from './systems/assetLoader.js';
import { monitorPerformance, drawPerformanceInfo } from './systems/performanceUtils.js';

// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop(timestamp) {
  try {
    // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const metrics = monitorPerformance(timestamp);
    
    // –ü–æ–ª—É—á–∞–µ–º canvas –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    
    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    update(window.player);
    
    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä—É
    draw(ctx, window.player);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º FPS
    if (window.gameState && window.gameState.showFPS) {
      drawPerformanceInfo(ctx, metrics);
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
    requestAnimationFrame(gameLoop);
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    debug(`‚ùå –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ: ${error.message}`, "error");
    console.error(error);
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É
    requestAnimationFrame(gameLoop);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
export async function startGame() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥—á–∏–∫
    initDebugger();
    debug('üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    window.gameState = {
      showInventory: false,
      scene: 'loading',
      showFPS: true,
      debug: true
    };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞
    window.player = initPlayer();
    debug(`‚úÖ –ò–≥—Ä–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${window.player.x}, ${window.player.y}]`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É
    window.map = map;
    
    // –ü–æ–ª—É—á–∞–µ–º canvas
    const canvas = document.getElementById('gameCanvas');
    if (!canvas) throw new Error('Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤–≤–æ–¥–∞
    setupInput(canvas);
    debug('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–≤–æ–¥–∞ –≥–æ—Ç–æ–≤–∞');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    debug('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    await loadAssets();
    debug('‚úÖ –†–µ—Å—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingScreen = document.getElementById('loadingScreen');
    if (loadingScreen) loadingScreen.style.display = 'none';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ü–µ–Ω—É
    window.gameState.scene = 'map';
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    debug('üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞');
    requestAnimationFrame(gameLoop);
    
    // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
    toggleDebug(true);
    
  } catch (error) {
    debug(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, "error");
    console.error('–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const debuggerDiv = document.getElementById('debugger');
    if (debuggerDiv) {
      debuggerDiv.classList.remove('collapsed');
      debuggerDiv.innerHTML += `<br><span style="color: red">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}</span>`;
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
document.addEventListener('DOMContentLoaded', () => {
  const debugButton = document.getElementById('debugButton');
  if (debugButton) {
    debugButton.addEventListener('click', () => {
      const dbg = document.getElementById('debugger');
      dbg.classList.toggle('collapsed');
      window.gameState.debug = !dbg.classList.contains('collapsed');
      toggleDebug(window.gameState.debug);
    });
  }
});