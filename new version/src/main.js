// src/main.js
import { Game } from './engine/core/Game.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let game = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
 */
export async function startGame() {
    try {
        console.log('üöÄ Initializing PixelEscape...');
        
        // –ü–æ–ª—É—á–∞–µ–º canvas
        const canvas = document.getElementById('gameCanvas');
        if (!canvas) {
            throw new Error('Canvas element not found!');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingScreen(true, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
        game = new Game(canvas);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É
        await loadResources();
        
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingScreen(false);
        
        console.log('‚úÖ Game initialized successfully!');
    } catch (error) {
        console.error('üí• Failed to initialize game:', error);
        showErrorScreen(error.message);
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
    const debugButton = document.getElementById('debugButton');
    if (debugButton) {
        debugButton.addEventListener('click', () => {
            toggleDebugMode();
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const inventoryButton = document.getElementById('inventoryButton');
    if (inventoryButton) {
        inventoryButton.addEventListener('click', () => {
            game.toggleInventory();
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    const menuButton = document.getElementById('menuButton');
    if (menuButton) {
        menuButton.addEventListener('click', () => {
            game.togglePause();
        });
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫—É—Ä—Å–æ—Ä
    document.addEventListener('mousemove', (e) => {
        const cursor = document.getElementById('customCursor');
        if (cursor) {
            cursor.style.left = e.clientX + 'px';
            cursor.style.top = e.clientY + 'px';
        }
    });
    
    // –ó–∞–ø—Ä–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏
    document.addEventListener('contextmenu', (e) => {
        e.preventDefault();
    });
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã
 */
async function loadResources() {
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingScreen(true, '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
        updateLoadingProgress(10);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Ç–µ–∫—Å—Ç—É—Ä—ã, –º–æ–¥–µ–ª–∏, –∑–≤—É–∫–∏)
        await game.resourceManager.loadAllResources((progress) => {
            updateLoadingProgress(10 + progress * 70); // –û—Ç 10% –¥–æ 80%
        });
        
        updateLoadingProgress(80);
        showLoadingScreen(true, '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∏ –æ–±—ä–µ–∫—Ç—ã
        await game.sceneManager.loadScene('map1');
        
        updateLoadingProgress(90);
        showLoadingScreen(true, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º...');
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        await game.entityManager.createPlayer();
        
        updateLoadingProgress(100);
        showLoadingScreen(true, '–ì–æ—Ç–æ–≤–æ!');
        
        // –ù–µ–º–Ω–æ–≥–æ –∑–∞–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å 100%
        await new Promise(resolve => setTimeout(resolve, 500));
        
        return true;
    } catch (error) {
        console.error('Error loading resources:', error);
        throw error;
    }
}

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoadingScreen(show, message = '') {
    const loadingScreen = document.getElementById('loadingScreen');
    const loadingText = document.getElementById('loadingText');
    
    if (!loadingScreen) return;
    
    if (show) {
        loadingScreen.style.display = 'flex';
        if (loadingText && message) {
            loadingText.textContent = message;
        }
    } else {
        loadingScreen.style.display = 'none';
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function updateLoadingProgress(percent) {
    const loadingBar = document.getElementById('loadingBar');
    if (loadingBar) {
        loadingBar.style.width = `${percent}%`;
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –æ—à–∏–±–∫–∏
 */
function showErrorScreen(message) {
    const loadingScreen = document.getElementById('loadingScreen');
    if (!loadingScreen) return;
    
    loadingScreen.style.display = 'flex';
    loadingScreen.innerHTML = `
        <div class="error-container">
            <h1 style="color: #f44; margin-bottom: 20px;">–û—à–∏–±–∫–∞</h1>
            <p style="color: #fff; margin-bottom: 30px;">${message}</p>
            <button class="ui-button" onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
        </div>
    `;
}

/**
 * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
 */
function toggleDebugMode() {
    if (!game) return;
    
    game.state.showDebug = !game.state.showDebug;
    
    const debugger = document.getElementById('debugger');
    if (debugger) {
        debugger.classList.toggle('collapsed', !game.state.showDebug);
    }
    
    console.log(`Debug mode: ${game.state.showDebug ? 'enabled' : 'disabled'}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    startGame();
});